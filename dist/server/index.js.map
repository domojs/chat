{"version":3,"sources":["../index.ts"],"names":[],"mappings":";AACA,+BAAiC;AAGjC,sCAAwC;AAKxC,iBAAe;AAEf,oCAAsC;AAEtC,IAAI,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,aAAa,CAAC,CAAC;AAE5C,EAAE,CAAC,cAAc,CAAC,CAAC,SAAS,CAAC,EAAE,UAAU,MAAyE;IAE9G,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,UAAU,EAAE,YAAY,CAAC,CAAC;IAElD,IAAI,KAAK,CAAC,eAAe,CAAoB,UAAU,CAAC,CAAC,OAAO,CAAC,UAAU,QAAQ;QAE/E,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACtB,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IAC3B,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,EAAE,CAAC;AAaL,EAAE,CAAC,QAAQ,CAAC,aAAa,EACrB,UAAU,IAAY,EAAE,QAAgD;IAEpE,IAAI,GAAG,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;IACzB,IAAI,YAAY,GAAkB,EAAE,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;IAC7D,SAAS,CAAC,YAAY,EAAE,UAAU,WAAW,EAAE,GAAG,EAAE,IAAI;QAEpD,WAAW,CAAC,GAAG,EAAE,IAAI,EAAE,UAAU,IAAY;YAEzC,QAAQ,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC,EAAE,UAAU,KAAK;QAEV,EAAE,CAAC,CAAC,KAAK,CAAC;YACN,QAAQ,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QACzB,IAAI;YACA,QAAQ,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IAC5B,CAAC,CAAC,CAAA;AACV,CAAC,CAAC,CAAC;AAEP,EAAE,CAAC,QAAQ,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC","file":"index.js","sourcesContent":["import { EventEmitter } from 'events';\r\nimport * as di from 'akala-core';\r\nimport * as fs from 'fs';\r\nimport * as $ from 'underscore';\r\nimport * as eachAsync from 'each-async';\r\nimport * as vm from 'vm';\r\nimport * as url from 'url';\r\nimport * as ajax from 'ajax-request-wrapper';\r\nimport * as util from 'util';\r\nimport './api';\r\nimport * as language from './language';\r\nimport * as akala from 'akala-server';\r\n\r\nvar debug = require('debug')('domojs:chat');\r\n\r\ndi.injectWithName(['$master'], function (master: (from?: string, masterPath?: string, workerPath?: string) => void)\r\n{\r\n    master(module.filename, './master', './language');\r\n\r\n    new akala.SharedComponent<language.Language>('language').receive(function (language)\r\n    {\r\n        console.log(language);\r\n        require(language.path);\r\n    });\r\n})();\r\n\r\nexport type Interpreter = (context: Context, next: (error?: any) => void, callback: (answer: string) => void) => void;\r\n\r\nexport interface Context\r\n{\r\n    text: string;\r\n    timeStart?: number;\r\n    time?: Date;\r\n    timeEnd?: number;\r\n    deferred?: boolean;\r\n}\r\n\r\ndi.register('interpreter',\r\n    function (text: string, callback: (status: number, text: string) => void)\r\n    {\r\n        var ctx = { text: text };\r\n        var interpreters: Interpreter[] = di.resolve('interpreters');\r\n        eachAsync(interpreters, function (interpreter, idx, next)\r\n        {\r\n            interpreter(ctx, next, function (text: string)\r\n            {\r\n                callback(200, text);\r\n            });\r\n        }, function (error)\r\n            {\r\n                if (error)\r\n                    callback(500, error);\r\n                else\r\n                    callback(200, 'ok');\r\n            })\r\n    });\r\n\r\ndi.register('interpreters', []);"],"sourceRoot":"chat/src/server"}